import Tensor from tensor
# calculate output
x = Tensor.randn(5, 6)
y = Tensor.rand(6, 3)
z = x.matmul(y)
w = Tensor.rand(3)
j = z.dot(w)
k = (j - Tensor.rand(5))*Tensor.randint(-10, -3, (5))
m = k/(-1)
n = (x.transpose()).dot(m)
l = n.sum()
# call backward() with respect to the output
l.backward()

# results
print("TENSOR: ")
print(x.numpy())
# results
print("GRADIENT: ")
print(f"{x.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print(y.numpy())
print("GRADIENT: ")
print(f"{y.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print(z.numpy())
print("GRADIENT: ")
print(f" {z.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print(j.numpy())
print("GRADIENT: ")
print(f" {j.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print(k.numpy())
print("GRADIENT: ")
print(f"{k.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print(m.numpy())
print("GRADIENT: ")
print(f"{m.grad.numpy()}")
print("\n \n")
print("TENSOR: ")
print("TENSOR: ")
print(n.numpy())
print("GRADIENT: ")
print(f"{n.grad.numpy()}")
print("\n \n")
print(l.numpy())
print("GRADIENT: ")
print(f"{l.grad.numpy()}")
